<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 把数据库的配置信息写在一个独立的文件当中 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 声明数据源DataSource：作用是->连接数据库的 -->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- set注入，给DruidDataSource提供连接数据库的信息 -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>

    <!-- 声明的是myBatis中提供的SqlSessionFactoryBean类，这个类的内部创建了SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- set注入，把数据库连接池赋值给了dataSource属性 -->
        <property name="dataSource" ref="myDataSource"/>

        <!-- 声明myBatis主配置文件的位置
                configLocation属性的类型是：Resource，用来读取配置文件
                它的赋值是特殊的！！！使用【value】
         -->
        <!-- 在Spring的配置文件中指定其它文件的路径，需要使用classpath -->
        <property name="configLocation" value="classpath:myBatis.xml"/>
    </bean>

    <!-- 创建dao对象，使用SqlSession的getMapper(StudentDao.class)生成每个dao接口的代理对象
            MapperScannerConfigurer：在内部调用getMapper()
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定SqlSessionFactory对象的id -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

        <!-- 指定包名，包名是dao接口所在的包名
                 MapperScannerConfigurer会扫描这个包中的所有接口，
                 并把【每个包中的接口】都执行一次【getMapper()】方法，得到每个接口的dao对象。
                 【再将创建好的dao对象放入到Spring容器中】
                 这里自动创建的dao接口对象的名称为：接口首字母小写
        -->
        <property name="basePackage" value="com.lujun61.dao"/>
    </bean>

    <!-- 创建Service -->
    <bean id="buyGoodsService" class="com.lujun61.service.impl.BuyGoodsServiceImpl">
        <!-- ref="studentDao"中的studentDao是自动创建的 -->
        <property name="saleDao" ref="saleDao"/>
        <property name="goodsDao" ref="goodsDao"/>
    </bean>


    <!-- 1、声明事务处理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="myDataSource" />
    </bean>

    <!-- 2、开启事务注解驱动：告诉Spring使用注解管理事务，创建代理对象
            transaction-manager：事务管理器对象的id
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>